import fetch from 'node-fetch';
import TelegramBot from 'node-telegram-bot-api';
import { CronJob } from 'cron';

const telegramToken = '7271006242:AAGxqf5j0lqLMjp8Jn_z0NXGDlr9FlyXrds';

const bot = new TelegramBot(telegramToken, { polling: true });
let subscribers = [];

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.setMyCommands([
    { command: '/start', description: 'Start receiving Bitcoin price updates' },
    { command: '/prices', description: 'Get the highest Bitcoin prices' }
]);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –±—ñ—Ç–∫–æ—ó–Ω–∞ –∑ Binance
async function getBitcoinPrice() {
    try {
        const response = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT');
        const data = await response.json();
        return data.price;
    } catch (error) {
        console.error('Error fetching Bitcoin price:', error);
        throw new Error('Could not fetch the current Bitcoin price.');
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –±—ñ—Ç–∫–æ—ó–Ω–∞ –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º
async function sendBitcoinPrice() {
    const price = await getBitcoinPrice();
    if (price) {
        const formattedPrice = formatPrice(price);
        for (const chatId of subscribers) {
            bot.sendMessage(chatId, `Current Bitcoin price: $${formattedPrice}`);
        }
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Ü—ñ–Ω –±—ñ—Ç–∫–æ—ó–Ω–∞ –∑ CoinGecko
async function getHistoricalBitcoinPrices(period) {
    let days;

    switch (period) {
        case 'day':
            days = 1;
            break;
        case 'week':
            days = 7;
            break;
        case 'month':
            days = 30;
            break;
        case 'year':
            days = 365;
            break;
        default:
            throw new Error("Invalid period. Use 'day', 'week', 'month', or 'year'.");
    }

    const url = `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=${days}`;

    try {
        const response = await fetch(url);
        const data = await response.json();
        if (!data.prices || data.prices.length === 0) {
            throw new Error("No price data available");
        }
        const highPrices = data.prices.map(price => price[1]); // Extracting prices
        const highestPrice = Math.max(...highPrices);
        return highestPrice;
    } catch (error) {
        console.error('Error fetching historical Bitcoin prices:', error);
        throw new Error("Failed to fetch historical prices");
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
function formatPrice(price) {
    const roundedPrice = parseFloat(price).toFixed(0); // Formatting to two decimal places
    return roundedPrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    if (!subscribers.includes(chatId)) {
        subscribers.push(chatId);
        try {
            const price = await getBitcoinPrice();
            const formattedPrice = formatPrice(price);
            bot.sendMessage(chatId, `From now on, the bot will monitor and send the current Bitcoin price every hour üöÄ\n\nCurrent Bitcoin price: $${formattedPrice}`);
        } catch (error) {
            bot.sendMessage(chatId, "There was an error fetching the current Bitcoin price.");
        }
    } else {
        bot.sendMessage(chatId, "You are already receiving the current Bitcoin price every hour üöÄ");
    }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /prices
bot.onText(/\/prices/, (msg) => {
    const chatId = msg.chat.id;
    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'Day', callback_data: 'day' },
                    { text: 'Week', callback_data: 'week' },
                    { text: 'Month', callback_data: 'month' },
                    { text: 'Year', callback_data: 'year' }
                ]
            ]
        }
    };
    bot.sendMessage(chatId, "Please select a period:", options);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const period = callbackQuery.data;

    try {
        const highestPrice = await getHistoricalBitcoinPrices(period);
        const formattedPrice = formatPrice(highestPrice);
        bot.sendMessage(chatId, `In the last ${period}, the highest Bitcoin price was $${formattedPrice}.`);
    } catch (error) {
        bot.sendMessage(chatId, `Error fetching data: ${error.message}`);
    }
});

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è cron –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
const sendJob = new CronJob('0 * * * *', sendBitcoinPrice, null, true, 'America/Los_Angeles');
sendJob.start();

console.log('///    bot is working    ///');
