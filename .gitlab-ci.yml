image:
  name: hashicorp/terraform:1.9.5
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  IMAGE_NAME: strelchenk0nazar/tgbot_deploy
  IMAGE_TAG: tgbot_deploy
  AWS_DEFAULT_REGION: "us-east-1"

stages:
  - build_docker_image
  - terraform_plan
  - terraform_apply
  - run_ansible
  - terraform_destroy

# Етап збірки Docker-образу
build_docker_image:
  stage: build_docker_image
  image: docker:latest
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

# Ініціалізація та перевірка Terraform
terraform_plan:
  stage: terraform_plan
  script:
    - cd terraform
    - rm -rf .terraform  # Очистка кешу Terraform
    - terraform init
    - terraform validate
    - terraform plan -out "planfile"
  artifacts:
    paths:
      - terraform/planfile
      - terraform/terraform.tfstate

# Застосування Terraform
terraform_apply:
  stage: terraform_apply
  dependencies:
    - terraform_plan
  script:
    - cd terraform
    - rm -rf .terraform  # Очистка кешу Terraform
    - terraform init
    - terraform apply -input=false "planfile"
    - export ELASTIC_IP=$(terraform output -raw elastic_ip)
    - echo "Elastic IP:${ELASTIC_IP}" 
    - echo "ELASTIC_IP=${ELASTIC_IP}" > .env
  artifacts:
    reports:
      dotenv: terraform/.env
    paths:
      - terraform/terraform.tfstate
  when: manual

# Запуск Ansible Playbook
run_ansible:
  stage: run_ansible
  image: python:3.12
  before_script:
    - pip install --upgrade pip
    - pip install ansible
    - ansible --version
    - ansible-galaxy collection install community.docker
    - pip3 install requests
    - chmod 600 ./key.pem 
  script:
    - ansible --version
    - apt-get update && apt-get install -y docker.io
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - echo "Elastic IP:${ELASTIC_IP}" 
    - ansible-playbook --inventory ansible/inventory/hosts.ini vm-setup-playbook.yml --extra-vars "elastic_ip=${ELASTIC_IP}"
  dependencies:
    - terraform_apply
  when: manual

# Знищення інфраструктури
terraform_destroy:
  stage: terraform_destroy
  script:
    - cd terraform
    - terraform init
    - terraform destroy -auto-approve
  dependencies:
    - terraform_apply
  when: manual

